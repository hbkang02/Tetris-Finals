{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../_gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            console.log('y: ', y, \" x: \", x);\n            console.log('');\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","console","log","pos","collided"],"sources":["/Users/heebeumkang/tetris-finals/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../_gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            console.log('y: ', (y), \" x: \", (x));\n            console.log('')\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,iBAAiB;AAE7C,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACE,WAAW,EAAE,CAAC;EACjD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACdQ,cAAc,CAAC,CAAC,CAAC;IACjB,MAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC5B,IAAIA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/CP,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChCJ,GAAG,CAACK,OAAO,CAAC,IAAIC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAOR,GAAG;MACZ;MACAA,GAAG,CAACS,IAAI,CAACR,GAAG,CAAC;MACb,OAAOD,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC;IAER,MAAMU,WAAW,GAAGC,SAAS,IAAI;MAC/B;MACA,MAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAG,CAACX,GAAG,IAChCA,GAAG,CAACW,GAAG,CAACT,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAAC,CAC7D;;MAED;MACAZ,MAAM,CAACsB,SAAS,CAACC,OAAO,CAAC,CAACb,GAAG,EAAEc,CAAC,KAAK;QACnCd,GAAG,CAACa,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACxB,IAAID,KAAK,KAAK,CAAC,EAAE;YACfE,OAAO,CAACC,GAAG,CAAC,KAAK,EAAGJ,CAAC,EAAG,MAAM,EAAGE,CAAC,CAAE;YACpCC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;YACfrB,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC6B,GAAG,CAACL,CAAC,CAAC,CAACE,CAAC,GAAG1B,MAAM,CAAC6B,GAAG,CAACH,CAAC,CAAC,GAAG,CAC7CD,KAAK,EACJ,GAAEzB,MAAM,CAAC8B,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC1C;UACH;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF;MACA,IAAI9B,MAAM,CAAC8B,QAAQ,EAAE;QACnB7B,WAAW,EAAE;QACb,OAAOK,SAAS,CAACC,QAAQ,CAAC;MAC5B;MACA,OAAOA,QAAQ;IACjB,CAAC;;IAED;IACAJ,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAI,CAAC,CAAC;EACrC,CAAC,EAAE,CACDb,MAAM,CAAC8B,QAAQ,EACf9B,MAAM,CAAC6B,GAAG,CAACH,CAAC,EACZ1B,MAAM,CAAC6B,GAAG,CAACL,CAAC,EACZxB,MAAM,CAACsB,SAAS,EAChBrB,WAAW,CACZ,CAAC;EAEF,OAAO,CAACC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,CAAC;AACvC,CAAC;AAAC,GAvDWL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}