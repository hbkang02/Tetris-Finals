{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};\n_s(useStage, \"5P+otx0I7S1W+XNBDZZ95jKxV+k=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","sweepRows","prev"],"sources":["/Users/heebeumkang/react-tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage];\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACE,WAAW,EAAE,CAAC;EAEjDD,SAAS,CAAC,MAAM;IAEd,MAAMO,WAAW,GAAGC,SAAS,IAAI;MAC/B;MACA,MAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAG,CAACC,GAAG,IAChCA,GAAG,CAACD,GAAG,CAACE,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAAC,CAC7D;;MAED;MACAT,MAAM,CAACU,SAAS,CAACC,OAAO,CAAC,CAACH,GAAG,EAAEI,CAAC,KAAK;QACnCJ,GAAG,CAACG,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACxB,IAAID,KAAK,KAAK,CAAC,EAAE;YACfP,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAGd,MAAM,CAACe,GAAG,CAACD,CAAC,CAAC,GAAG,CAC7CD,KAAK,EACJ,GAAEb,MAAM,CAACgB,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC1C;UACH;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF;MACA,IAAIhB,MAAM,CAACgB,QAAQ,EAAE;QACnBf,WAAW,EAAE;QACb,OAAOgB,SAAS,CAACX,QAAQ,CAAC;MAC5B;MACA,OAAOA,QAAQ;IACjB,CAAC;;IAED;IACAH,QAAQ,CAACe,IAAI,IAAId,WAAW,CAACc,IAAI,CAAC,CAAC;EACrC,CAAC,EAAE,CACDlB,MAAM,EACNC,WAAW,CACZ,CAAC;EAEF,OAAO,CAACC,KAAK,EAAEC,QAAQ,CAAC;AAC1B,CAAC;AAAC,GAtCWJ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}