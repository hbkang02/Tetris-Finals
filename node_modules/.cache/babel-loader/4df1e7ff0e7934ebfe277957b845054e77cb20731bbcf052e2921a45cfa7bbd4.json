{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { createStage } from \"../_gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((acc, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return acc;\n      }\n      acc.push(row);\n      return acc;\n    }, []);\n    const updateStage = prevStage => {\n      //first clear the stage(can use forloop instead for performance)\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell));\n\n      // then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? \"merged\" : \"clear\"}`];\n          }\n        });\n      });\n\n      // Then Check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useEffect","useState","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","acc","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"sources":["/Users/heebeumkang/tetris-finals/src/hooks/useStage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { createStage } from \"../_gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage =>\n    newStage.reduce((acc, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return acc;\n      }\n      acc.push(row);\n      return acc;\n    }, [])\n\n\n    const updateStage = (prevStage) => {\n      //first clear the stage(can use forloop instead for performance)\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`,\n            ];\n          }\n        });\n      });\n\n      // Then Check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,iBAAiB;AAE7C,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACC,WAAW,EAAE,CAAC;EACjD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACdS,cAAc,CAAC,CAAC,CAAC;IAEjB,MAAMC,SAAS,GAAGC,QAAQ,IAC1BA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC5B,IAAIA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/CP,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChCJ,GAAG,CAACK,OAAO,CAAC,IAAIC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAOR,GAAG;MACZ;MACAA,GAAG,CAACS,IAAI,CAACR,GAAG,CAAC;MACb,OAAOD,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC;IAGN,MAAMU,WAAW,GAAIC,SAAS,IAAK;MACjC;MACA,MAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAG,CAAEX,GAAG,IACjCA,GAAG,CAACW,GAAG,CAAET,IAAI,IAAMA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAAC,CAC/D;;MAED;MACAZ,MAAM,CAACsB,SAAS,CAACC,OAAO,CAAC,CAACb,GAAG,EAAEc,CAAC,KAAK;QACnCd,GAAG,CAACa,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACxB,IAAID,KAAK,KAAK,CAAC,EAAE;YACflB,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAG1B,MAAM,CAAC2B,GAAG,CAACD,CAAC,CAAC,GAAG,CAC7CD,KAAK,EACJ,GAAEzB,MAAM,CAAC4B,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC1C;UACH;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI5B,MAAM,CAAC4B,QAAQ,EAAE;QACnB3B,WAAW,EAAE;QACb,OAAOK,SAAS,CAACC,QAAQ,CAAC;MAC5B;MACA,OAAOA,QAAQ;IACjB,CAAC;IAEDJ,QAAQ,CAAEU,IAAI,IAAKM,WAAW,CAACN,IAAI,CAAC,CAAC;EACvC,CAAC,EAAE,CAACb,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,CAACC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,CAAC;AACvC,CAAC;AAAC,GAjDWL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}