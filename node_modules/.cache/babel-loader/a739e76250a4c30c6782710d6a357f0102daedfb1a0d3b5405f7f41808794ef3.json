{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { checkCollision, STAGE_WIDTH } from \"../_gameHelpers\";\nexport const usePlayer = () => {\n  _s();\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n  const rotate = (matrix, dir) => {\n    // make the rows to become cols (transpose)\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    //reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) setPlayer(clonedPlayer);\n  };\n  const updatePlayerPos = _ref => {\n    let {\n      x,\n      y,\n      collided\n    } = _ref;\n    setPlayer(prev => ({\n      ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n_s(usePlayer, \"sRjgx5PaSNzy93RNQSfkd0oqQyI=\");","map":{"version":3,"names":["useCallback","useState","TETROMINOS","randomTetromino","checkCollision","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","updatePlayerPos","prev","resetPlayer"],"sources":["/Users/heebeumkang/react-tetris/src/hooks/usePlayer.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { checkCollision, STAGE_WIDTH } from \"../_gameHelpers\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    // make the rows to become cols (transpose)\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map((col) => col[index])\n    );\n    //reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0}))\n\n    setPlayer(clonedPlayer);\n  };\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,UAAU,EAAEC,eAAe,QAAQ,eAAe;AAC3D,SAASC,cAAc,EAAEC,WAAW,QAAQ,iBAAiB;AAE7D,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC;IACnCQ,GAAG,EAAE;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACnBC,SAAS,EAAEV,UAAU,CAAC,CAAC,CAAC,CAACW,KAAK;IAC9BC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,CAACC,MAAM,EAAEC,GAAG,KAAK;IAC9B;IACA,MAAMC,YAAY,GAAGF,MAAM,CAACG,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACvCL,MAAM,CAACG,GAAG,CAAEG,GAAG,IAAKA,GAAG,CAACD,KAAK,CAAC,CAAC,CAChC;IACD;IACA,IAAIJ,GAAG,GAAG,CAAC,EAAE,OAAOC,YAAY,CAACC,GAAG,CAAEI,GAAG,IAAKA,GAAG,CAACC,OAAO,EAAE,CAAC;IAC5D,OAAON,YAAY,CAACM,OAAO,EAAE;EAC/B,CAAC;EAED,MAAMC,YAAY,GAAG,CAACC,KAAK,EAAET,GAAG,KAAK;IACnC,MAAMU,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACvB,MAAM,CAAC,CAAC;IACvDoB,YAAY,CAACf,SAAS,GAAGG,MAAM,CAACY,YAAY,CAACf,SAAS,EAAEK,GAAG,CAAC;IAE5D,MAAMR,GAAG,GAAGkB,YAAY,CAAClB,GAAG,CAACC,CAAC;IAC9B,IAAIqB,MAAM,GAAG,CAAC;IACd,OAAM3B,cAAc,CAACuB,YAAY,EAAED,KAAK,EAAE;MAAEhB,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAC,CAAC,EAExDH,SAAS,CAACmB,YAAY,CAAC;EACzB,CAAC;EACD,MAAMK,eAAe,GAAG,QAAwB;IAAA,IAAvB;MAAEtB,CAAC;MAAEC,CAAC;MAAEG;IAAS,CAAC;IACzCN,SAAS,CAAEyB,IAAI,KAAM;MACnB,GAAGA,IAAI;MACPxB,GAAG,EAAE;QAAEC,CAAC,EAAGuB,IAAI,CAACxB,GAAG,CAACC,CAAC,IAAIA,CAAE;QAAEC,CAAC,EAAGsB,IAAI,CAACxB,GAAG,CAACE,CAAC,IAAIA;MAAG,CAAC;MACnDG;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMoB,WAAW,GAAGlC,WAAW,CAAC,MAAM;IACpCQ,SAAS,CAAC;MACRC,GAAG,EAAE;QAAEC,CAAC,EAAEL,WAAW,GAAG,CAAC,GAAG,CAAC;QAAEM,CAAC,EAAE;MAAE,CAAC;MACrCC,SAAS,EAAET,eAAe,EAAE,CAACU,KAAK;MAClCC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACP,MAAM,EAAEyB,eAAe,EAAEE,WAAW,EAAET,YAAY,CAAC;AAC7D,CAAC;AAAC,GA5CWnB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}