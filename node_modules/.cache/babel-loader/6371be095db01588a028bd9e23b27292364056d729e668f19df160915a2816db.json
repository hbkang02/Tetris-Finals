{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { randomTetromino } from \"../tetrominos\";\nexport const usePlayer = () => {\n  _s();\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  });\n  const updatePlayerPos = _ref => {\n    let {\n      x,\n      y,\n      collided\n    } = _ref;\n    setPlayer(prev => ({\n      ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      }\n    }));\n  };\n  return [player];\n};\n_s(usePlayer, \"xYA2GhjxS8xe+nz5PhRk6wVUCSU=\");","map":{"version":3,"names":["useState","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev"],"sources":["/Users/heebeumkang/react-tetris/src/hooks/usePlayer.js"],"sourcesContent":["import { useState } from \"react\";\nimport { randomTetromino } from \"../tetrominos\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {x: 0, y: 0},\n    tetromino: randomTetromino().shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided}) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)}\n    }))\n  }\n\n  return [player];\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,eAAe;AAE/C,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC;IACnCK,GAAG,EAAE;MAACC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAC;IACjBC,SAAS,EAAEP,eAAe,EAAE,CAACQ,KAAK;IAClCC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,eAAe,GAAG,QAAuB;IAAA,IAAtB;MAAEL,CAAC;MAAEC,CAAC;MAAEG;IAAQ,CAAC;IACxCN,SAAS,CAACQ,IAAI,KAAK;MACjB,GAAGA,IAAI;MACPP,GAAG,EAAE;QAAEC,CAAC,EAAGM,IAAI,CAACP,GAAG,CAACC,CAAC,IAAIA,CAAE;QAAEC,CAAC,EAAGK,IAAI,CAACP,GAAG,CAACE,CAAC,IAAIA;MAAE;IACnD,CAAC,CAAC,CAAC;EACL,CAAC;EAED,OAAO,CAACJ,MAAM,CAAC;AACjB,CAAC;AAAA,GAfYD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}