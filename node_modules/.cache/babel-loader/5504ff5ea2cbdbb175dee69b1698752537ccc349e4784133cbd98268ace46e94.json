{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../_gameHelpers\";\nexport const usePlayer = () => {\n  _s();\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n  const updatePlayerPos = _ref => {\n    let {\n      x,\n      y,\n      collided\n    } = _ref;\n    setPlayer(prev => ({\n      ...prev,\n      pos: {\n        x: prev.pos.x + x,\n        y: prev.pos.y + y\n      },\n      collided\n    }));\n  };\n  const spacePlayerPos = _ref2 => {\n    let {\n      x,\n      y,\n      collided,\n      keyPressed\n    } = _ref2;\n    setPlayer(prev => {\n      let newY = prev.pos.y + y;\n      if (keyPressed === 'space') {\n        newY = 0;\n      }\n      return {\n        ...prev,\n        pos: {\n          x: prev.pos.x + x,\n          y: newY\n        },\n        collided\n      };\n    });\n  };\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate, spacePlayerPos];\n};\n_s(usePlayer, \"sRjgx5PaSNzy93RNQSfkd0oqQyI=\");","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","mtrx","map","_","index","column","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","spacePlayerPos","keyPressed","newY","resetPlayer"],"sources":["/Users/heebeumkang/tetris-finals/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../_gameHelpers\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) =>\n      matrix.map((column) => column[index])\n    );\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map((row) => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: prev.pos.x + x, y: prev.pos.y + y },\n      collided,\n    }));\n  };\n\n  const spacePlayerPos = ({ x, y, collided, keyPressed }) => {\n    setPlayer((prev) => {\n      let newY = prev.pos.y + y;\n      if (keyPressed === 'space') {\n        newY = 0;\n      }\n      return {\n        ...prev,\n        pos: { x: prev.pos.x + x, y: newY },\n        collided,\n      };\n    });\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate, spacePlayerPos];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}