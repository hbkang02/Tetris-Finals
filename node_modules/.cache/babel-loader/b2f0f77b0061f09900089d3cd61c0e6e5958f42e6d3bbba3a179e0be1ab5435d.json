{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, _ref) => {\n  let {\n    x: moveX,\n    y: moveY\n  } = _ref;\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that w'ere on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        // 2. \n      }\n    }\n  }\n};","map":{"version":3,"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length"],"sources":["/Users/heebeumkang/react-tetris/src/_gameHelpers.js"],"sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n\n      // 1. Check that w'ere on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        // 2. \n      }\n\n    }\n  }\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAAE;AAC7B,OAAO,MAAMC,YAAY,GAAG,EAAE;AAE9B,OAAO,MAAMC,WAAW,GAAG,MACzBC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACF,YAAY,CAAC,EAAE,MAC9B,IAAIE,KAAK,CAACH,WAAW,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAC1C;AAEH,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAM,EAAEC,KAAK,WAA6B;EAAA,IAA3B;IAAEC,CAAC,EAAEC,KAAK;IAAEC,CAAC,EAAEC;EAAM,CAAC;EAClE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACM,SAAS,CAACC,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;IACnD,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACG,MAAM,EAAEL,CAAC,IAAI,CAAC,EAAE;MAEtD;MACA,IAAIF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACF,CAAC,CAAC,KAAK,CAAC,EAAE;QAChC;MAAA;IAGJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}